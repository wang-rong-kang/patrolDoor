<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.unicom.patrolDoor.dao.NotificationMapper">
    <resultMap id="BaseResultMap" type="com.unicom.patrolDoor.entity.Notification">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="notifier" property="notifier" jdbcType="BIGINT"/>
        <result column="receiver" property="receiver" jdbcType="BIGINT"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="gmt_create" property="gmtCreate" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="comment_id" property="commentId" jdbcType="INTEGER"/>
        <result column="question_id" property="questionId" jdbcType="INTEGER"/>
        <result column="isNoQuestion" property="is_no_question" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        ,
        notifier,
        receiver,
        type,
        gmt_create,
        status,
        question_id,
        is_no_question
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from notification
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from notification
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.unicom.patrolDoor.entity.Notification">
        insert into notification (id, notifier, receiver,
                                  type, gmt_create,
                                  status)
        values (#{id,jdbcType=BIGINT}, #{notifier,jdbcType=BIGINT}, #{receiver,jdbcType=BIGINT},
                #{type,jdbcType=INTEGER}, #{gmtCreate,jdbcType=VARCHAR},
                #{status,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.unicom.patrolDoor.entity.Notification">
        insert into notification
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="notifier != null">
                notifier,
            </if>
            <if test="receiver != null">
                receiver,
            </if>

            <if test="type != null">
                type,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="status != null">
                status,
            </if>

            <if test="commentId != null">
                comment_id,
            </if>
            <if test="questionId != null">
                question_id,
            </if>
            <if test="isNoQuestion != null">
                is_no_question,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="notifier != null">
                #{notifier,jdbcType=BIGINT},
            </if>
            <if test="receiver != null">
                #{receiver,jdbcType=BIGINT},
            </if>

            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>

            <if test="commentId != null">
                #{commentId,jdbcType=INTEGER},
            </if>
            <if test="questionId != null">
                #{questionId,jdbcType=INTEGER},
            </if>
            <if test="isNoQuestion != null">
                #{isNoQuestion,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>


    <update id="updateByPrimaryKeySelective" parameterType="com.unicom.patrolDoor.entity.Notification">
        update notification
        <set>
            <if test="notifier != null">
                notifier = #{notifier,jdbcType=BIGINT},
            </if>
            <if test="receiver != null">
                receiver = #{receiver,jdbcType=BIGINT},
            </if>

            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="commentId != null">
                comment_id = #{commentId,jdbcType=INTEGER},
            </if>
            <if test="questionId != null">
                question_id = #{questionId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.unicom.patrolDoor.entity.Notification">
        update notification
        set notifier      = #{notifier,jdbcType=BIGINT},
            receiver      = #{receiver,jdbcType=BIGINT},
            type          = #{type,jdbcType=INTEGER},
            gmt_create    = #{gmtCreate,jdbcType=VARCHAR},
            status        = #{status,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>


    <select id="selectByUserIdAndStatus" resultType="java.lang.Integer">
        select count(n.id)
        from notification n
        LEFT JOIN question q ON n.question_id = q.id
        where n.receiver = #{userId,jdbcType=INTEGER}
          and n.status = #{statu,jdbcType=INTEGER}
          and n.is_no_question =0
          and q.tag!=99999
          and q.type=0
    </select>

    <select id="selectListByUserIdAndStatus" resultType="java.util.Map">
        SELECT
            q.title,
            t.name,
            n.id
        FROM
            question q
                LEFT JOIN tag t ON t.id = q.tag
                LEFT JOIN notification n ON n.question_id = q.id
        WHERE
            n.receiver = #{userId,jdbcType=INTEGER}
          AND n.status = #{statu,jdbcType=INTEGER}
          AND n.status !=2
          AND n.is_no_question =0
          and q.tag!=99999
          and q.type=0
          order by n.id desc

    </select>


    <select id="selectByNotificationId" resultType="java.util.Map">
        SELECT
            u.name as notifier,
            c.type as comment_type,
            c.content as comment_content,
            c.gmt_create as comment_gmtcreate,
            n.comment_id,
            q.title as question_name,
            q.tag as question_tag,
            q.description as question_description,
            q.pic as question_pic,
            q.creator as question_creator,
            q.url as url

        FROM
            notification n
                LEFT JOIN user u on n.notifier=u.id
                LEFT JOIN comment c ON n.comment_id=c.id
                LEFT JOIN question q ON n.question_id = q.id
        WHERE
            n.id = #{notificationId,jdbcType=INTEGER}

    </select>

    <select id="selectQuestionUnReadOrReadListByUserIdAndStatus" resultType="java.util.Map">
        SELECT
            n.id as id,
            n.question_id as questionId,
            u.name as notifier,
            q.title as questionName,
            q.tag as questionTag,
            q.description as questionDescription,
            q.pic as questionPic,
            q.creator as questionCreator,
            q.url as url

        FROM
            notification n
                LEFT JOIN user u on n.notifier=u.id
                LEFT JOIN question q ON n.question_id = q.id
        WHERE
            n.status=#{statu}
            and n.receiver=#{userId}
            and n.is_no_question=1
            and n.status!=2
            and q.tag!=99999
            and q.type=0
    </select>



    <update id="questionUpdateUnReadToRead">
        update notification
        set status = 1
        where id = #{notificationId,jdbcType=BIGINT}
    </update>


    <select id="selectQuestionUnReadOrReadListAndNum" resultType="java.util.Map">
        SELECT
            n.id as id,
            n.question_id as questionId,
            q.title as questionName
        FROM
            notification n
                LEFT JOIN user u on n.notifier=u.id
                LEFT JOIN question q ON n.question_id = q.id
        WHERE

          n.receiver=#{userId}
          and n.status=#{statu}
          and n.is_no_question=1
          and n.status!=2
          and q.type=0

    </select>

</mapper>